--Data Exploration
--looking at the columns/data needed for the analysis
SELECT 
  location, 
  date, 
  total_cases, 
  new_cases, 
  total_deaths, 
  population
FROM 
  `airy-lodge-379909.covid.CovidDeaths` 
LIMIT 1000;

--countries with highest Death Count per Population
--cast total_deaths as the data format is string
SELECT
  location,  
  max(cast(total_deaths as int64))/population *100 as deathrate_per_population,
  population
FROM
  `airy-lodge-379909.covid.CovidDeaths`
GROUP BY
  location, population
ORDER BY
  deathrate_per_population desc;

--only looking at location with highest total deaths
SELECT
  continent,  
  max(total_deaths )as total_death_count
FROM
  `airy-lodge-379909.covid.CovidDeaths`
GROUP BY
  continent
ORDER BY
  total_death_count desc;

--then you start to see location column includes not only country but also region/continent
--let's see where continent is not null, because that's wherethe location will show a region/continent
SELECT
  distinct continent, 
  location
FROM
  `airy-lodge-379909.covid.CovidDeaths`
--WHERE location != 'Africa' AND location != 'Asia'AND location != 'European Union'-not using it since there are 12 conditions
GROUP BY
  continent, location
ORDER BY
  continent;

--going to convert empty cells to null by creating new column called new_continent
SELECT
  new_continent, 
  location
FROM
  (
    SELECT
      distinct (case continent
      when '' then null
      else continent
      end)
      as new_continent,
      *
    FROM
      `airy-lodge-379909.covid.CovidDeaths`
    ORDER BY
      new_continent
  )
WHERE
  new_continent is not null
GROUP BY
  new_continent, location
ORDER BY
  new_continent;


--NULLIF(column_name,'') - to change the empty cells to NULL

--showing continent with highest death rate

--global numbers
--check how many new cases per day in total globally
SELECT 
  date, 
  sum(new_cases) as total_cases, 
  sum(new_deaths) as total_deaths, 
  (sum(new_deaths)/sum(new_cases))*100 as death_percentage
FROM
  (
    SELECT
      distinct (case continent
      when '' then null
      else continent
      end)
      as new_continent,
      *
    FROM
      `airy-lodge-379909.covid.CovidDeaths`
    ORDER BY
      new_continent
  )
WHERE
  new_cases != 0
GROUP BY
  date
ORDER BY
  1;
--global numbers
--check how many new cases per day in total globally, query version 2
SELECT 
  date, 
  sum(new_cases) as total_cases, 
  sum(new_deaths) as total_deaths, 
  (sum(new_deaths)/sum(new_cases))*100 as death_percentage
FROM
  `airy-lodge-379909.covid.CovidDeaths`
WHERE
 continent IS NOT NULL AND continent != "" AND new_cases != 0
GROUP BY
  date
ORDER BY
  1;

--just looking at how total global death percentage
SELECT 
  sum(new_cases) as total_cases, 
  sum(new_deaths) as total_deaths, 
  (sum(new_deaths)/sum(new_cases))*100 as death_percentage
FROM
  (
    SELECT
      distinct (case continent
      when '' then null
      else continent
      end)
      as new_continent,
      *
    FROM
      `airy-lodge-379909.covid.CovidDeaths`
    ORDER BY
      new_continent
  )
ORDER BY
  1;

--Looking at total population vs vaccination

SELECT 
  deaths.continent, deaths.location, deaths.date, deaths.population, vaxx.new_vaccinations
FROM
  `airy-lodge-379909.covid.CovidDeaths` as deaths
JOIN
  `airy-lodge-379909.covid.vaccinations` as vaxx 
  ON deaths.location = vaxx.location
  AND deaths.date = vaxx.date
WHERE 
  deaths.continent IS NOT NULL AND deaths.continent != ""
ORDER BY
2,3;

--use over partition by to create a column w cummulative number of vaxxed people everyday
SELECT 
  deaths.continent, deaths.location, deaths.date, deaths.population, vaxx.new_vaccinations, 
  SUM (vaxx.new_vaccinations) OVER (partition by deaths.location order by deaths.location, deaths.date) as RollingPeopleVaccinated
FROM
  `airy-lodge-379909.covid.CovidDeaths` as deaths
JOIN
  `airy-lodge-379909.covid.vaccinations` as vaxx 
  ON deaths.location = vaxx.location
  AND deaths.date = vaxx.date
WHERE 
  deaths.continent IS NOT NULL AND deaths.continent != ""
ORDER BY
2,3;

SELECT 
  deaths.continent, deaths.location, deaths.date, deaths.population, vaxx.new_vaccinations, 
  SUM (vaxx.new_vaccinations) OVER (partition by deaths.location order by deaths.location, deaths.date) as RollingPeopleVaccinated
FROM
  `airy-lodge-379909.covid.CovidDeaths` as deaths
JOIN
  `airy-lodge-379909.covid.vaccinations` as vaxx 
  ON deaths.location = vaxx.location
  AND deaths.date = vaxx.date
WHERE 
  deaths.continent IS NOT NULL AND deaths.continent != ""
ORDER BY
2,3;

--use CTE, to look at % people vaccinated over time
WITH
  PopvsVaxx
AS (
SELECT 
  deaths.continent, deaths.location, deaths.date, deaths.population, vaxx.new_vaccinations, 
  SUM (vaxx.new_vaccinations) OVER (partition by deaths.location order by deaths.location, deaths.date) as RollingPeopleVaccinated
FROM
  `airy-lodge-379909.covid.CovidDeaths` as deaths
JOIN
  `airy-lodge-379909.covid.vaccinations` as vaxx 
  ON deaths.location = vaxx.location
  AND deaths.date = vaxx.date
WHERE 
  deaths.continent IS NOT NULL AND deaths.continent != ""
ORDER BY
2,3
)
SELECT 
  continent, location, max((RollingPeopleVaccinated/population)*100) as max_percent_vaxx
FROM
  PopvsVaxx
GROUP BY
  continent, location
ORDER BY
  3 desc;

--temp table
CREATE TEMPORARY TABLE PercentPopulationVaxx AS
  SELECT 
  deaths.continent, deaths.location, deaths.date, deaths.population, vaxx.new_vaccinations, 
  SUM (vaxx.new_vaccinations) OVER (partition by deaths.location order by deaths.location, deaths.date) as RollingPeopleVaccinated
FROM
  `airy-lodge-379909.covid.CovidDeaths` as deaths
JOIN
  `airy-lodge-379909.covid.vaccinations` as vaxx 
  ON deaths.location = vaxx.location
  AND deaths.date = vaxx.date
WHERE 
  deaths.continent IS NOT NULL AND deaths.continent != ""
ORDER BY
2,3;

--creating view to store data for visualization
--view for PercentPopulationVaxx
CREATE VIEW airy-lodge-379909.covid.PercentPopulationVaxx AS
 (
   SELECT 
  deaths.continent, deaths.location, deaths.date, deaths.population, vaxx.new_vaccinations, 
  SUM (vaxx.new_vaccinations) OVER (partition by deaths.location order by deaths.location, deaths.date) as RollingPeopleVaccinated
FROM
  `airy-lodge-379909.covid.CovidDeaths` as deaths
JOIN
  `airy-lodge-379909.covid.vaccinations` as vaxx 
  ON deaths.location = vaxx.location
  AND deaths.date = vaxx.date
WHERE 
  deaths.continent IS NOT NULL AND deaths.continent != ""
ORDER BY
2,3
 );

CREATE VIEW airy-lodge-379909.covid.GlobalDeathperDay AS
(
  SELECT 
  date, 
  sum(new_cases) as total_cases, 
  sum(new_deaths) as total_deaths, 
  (sum(new_deaths)/sum(new_cases))*100 as death_percentage
FROM
  `airy-lodge-379909.covid.CovidDeaths`
WHERE
 continent IS NOT NULL AND continent != "" AND new_cases != 0
GROUP BY
  date
ORDER BY
  1
);

CREATE VIEW airy-lodge-379909.covid.DeathRatePerLocationPopulation AS
(
  SELECT
  location,  
  max(cast(total_deaths as int64))/population *100 as deathrate_per_population,
  population
FROM
  `airy-lodge-379909.covid.CovidDeaths`
GROUP BY
  location, population
ORDER BY
  deathrate_per_population desc
);
